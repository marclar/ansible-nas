---
# SAFE LISTMONK DEPLOYMENT - Prevents database overwrites
# This version includes multiple safeguards to protect existing data

- name: Start Listmonk (Safe Mode)
  block:
    # ============================================
    # PHASE 1: PRE-DEPLOYMENT SAFETY CHECKS
    # ============================================
    
    - name: Check if database volume exists
      ansible.builtin.stat:
        path: "{{ listmonk_db_directory }}/PG_VERSION"
      register: db_volume_exists

    - name: Check if database container is running
      ansible.builtin.shell: docker ps --filter name={{ listmonk_db_container_name }} --format "table {{.Names}}" | grep -q {{ listmonk_db_container_name }}
      register: db_container_running
      ignore_errors: true
      changed_when: false

    - name: Display database status
      ansible.builtin.debug:
        msg: |
          ========================================
          DATABASE SAFETY CHECK RESULTS:
          ========================================
          Database Volume: {{ 'EXISTS' if db_volume_exists.stat.exists else 'DOES NOT EXIST' }}
          Database Container: {{ 'RUNNING' if db_container_running.rc == 0 else 'NOT RUNNING' }}
          Database Path: {{ listmonk_db_directory }}
          
          {% if db_volume_exists.stat.exists %}
          ⚠️  EXISTING DATABASE DETECTED - WILL BE PRESERVED
          {% else %}
          ✅ NEW INSTALLATION - DATABASE WILL BE INITIALIZED
          {% endif %}
          ========================================

    # ============================================
    # PHASE 2: AUTOMATIC BACKUP
    # ============================================
    
    - name: Create backup directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_nas_user }}"
        group: "{{ ansible_nas_user }}"
      with_items:
        - "{{ listmonk_data_directory }}"
        - "{{ listmonk_data_directory }}/auto_backups"
        - "{{ listmonk_db_directory }}"
      become: true

    - name: Perform automatic database backup
      when: 
        - db_volume_exists.stat.exists
        - db_container_running.rc == 0
      block:
        - name: Create timestamped backup
          ansible.builtin.shell: |
            BACKUP_FILE="{{ listmonk_data_directory }}/auto_backups/listmonk_$(date +%Y%m%d_%H%M%S).sql"
            docker exec {{ listmonk_db_container_name }} pg_dump -U {{ listmonk_db_user }} {{ listmonk_db_name }} > "${BACKUP_FILE}"
            
            if [ -s "${BACKUP_FILE}" ]; then
              echo "✅ Backup successful: ${BACKUP_FILE}"
              echo "Size: $(ls -lh ${BACKUP_FILE} | awk '{print $5}')"
              
              # Compress the backup
              gzip -c "${BACKUP_FILE}" > "${BACKUP_FILE}.gz"
              
              # Keep only last 10 uncompressed and 30 compressed backups
              ls -t {{ listmonk_data_directory }}/auto_backups/*.sql 2>/dev/null | tail -n +11 | xargs -r rm
              ls -t {{ listmonk_data_directory }}/auto_backups/*.sql.gz 2>/dev/null | tail -n +31 | xargs -r rm
              
              echo "Backup location: ${BACKUP_FILE}.gz"
            else
              echo "⚠️  Backup file is empty - possible error"
              exit 1
            fi
          register: backup_result
          become: true

        - name: Display backup result
          ansible.builtin.debug:
            msg: "{{ backup_result.stdout }}"

    # ============================================
    # PHASE 3: DATABASE CONTAINER MANAGEMENT
    # ============================================
    
    - name: Create/Update PostgreSQL container (preserving data)
      community.docker.docker_container:
        name: "{{ listmonk_db_container_name }}"
        image: "{{ listmonk_db_image }}"
        pull: true
        state: started
        restart_policy: unless-stopped
        volumes:
          - "{{ listmonk_db_directory }}:/var/lib/postgresql/data:rw"
        env:
          POSTGRES_USER: "{{ listmonk_db_user }}"
          POSTGRES_PASSWORD: "{{ listmonk_db_password }}"
          POSTGRES_DB: "{{ listmonk_db_name }}"
          PGDATA: "/var/lib/postgresql/data/pgdata"  # Explicit data directory
        labels:
          traefik.enable: "false"
          backup.enable: "true"
          backup.frequency: "daily"
        # CRITICAL SETTINGS TO PREVENT DATA LOSS:
        recreate: false  # Never recreate container
        comparisons:
          image: strict  # Only pull new image if tag changes
          env: strict     # Only recreate if env changes
        keep_volumes: true  # Never remove volumes

    - name: Wait for PostgreSQL to be ready
      ansible.builtin.wait_for:
        port: 5432
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 90
        delay: 5
        sleep: 2
      register: postgres_ready

    # ============================================
    # PHASE 4: DATABASE INITIALIZATION CHECK
    # ============================================
    
    - name: Check if Listmonk schema exists
      ansible.builtin.shell: |
        docker exec {{ listmonk_db_container_name }} psql -U {{ listmonk_db_user }} -d {{ listmonk_db_name }} -c "\dt" 2>&1 | grep -E "(subscribers|campaigns|lists)" || echo "NO_SCHEMA"
      register: schema_check
      changed_when: false

    - name: Initialize database ONLY if schema doesn't exist
      when: "'NO_SCHEMA' in schema_check.stdout"
      block:
        - name: Run Listmonk database initialization
          ansible.builtin.shell: |
            docker run --rm \
              --network container:{{ listmonk_db_container_name }} \
              -e LISTMONK_db__host=localhost \
              -e LISTMONK_db__port=5432 \
              -e LISTMONK_db__user={{ listmonk_db_user }} \
              -e LISTMONK_db__password={{ listmonk_db_password }} \
              -e LISTMONK_db__database={{ listmonk_db_name }} \
              -e LISTMONK_db__ssl_mode=disable \
              {{ listmonk_image_name }}:{{ listmonk_image_tag }} \
              ./listmonk --install --yes
          register: db_init
          
        - name: Display initialization result
          ansible.builtin.debug:
            msg: |
              Database Initialization Complete
              Output: {{ db_init.stdout | default('') }}

    - name: Verify database integrity
      ansible.builtin.shell: |
        docker exec {{ listmonk_db_container_name }} psql -U {{ listmonk_db_user }} -d {{ listmonk_db_name }} -c "
          SELECT 
            (SELECT COUNT(*) FROM subscribers) as subscribers,
            (SELECT COUNT(*) FROM campaigns) as campaigns,
            (SELECT COUNT(*) FROM lists) as lists;
        "
      register: db_stats
      changed_when: false

    - name: Display database statistics
      ansible.builtin.debug:
        msg: |
          Database Statistics:
          {{ db_stats.stdout }}

    # ============================================
    # PHASE 5: APPLICATION CONTAINER
    # ============================================
    
    - name: Create Listmonk application container
      community.docker.docker_container:
        name: "{{ listmonk_container_name }}"
        image: "{{ listmonk_image_name }}:{{ listmonk_image_tag }}"
        pull: true
        state: started
        restart_policy: unless-stopped
        memory: "{{ listmonk_memory if listmonk_memory else omit }}"
        volumes:
          - "{{ listmonk_data_directory }}/uploads:/listmonk/uploads:rw"
          - "{{ listmonk_data_directory }}/config.toml:/listmonk/config.toml:ro"
        ports:
          - "{{ listmonk_port }}:9000"
        env:
          TZ: "{{ ansible_nas_timezone }}"
          LISTMONK_app__address: "0.0.0.0:9000"
          LISTMONK_db__host: "{{ listmonk_db_container_name }}"
          LISTMONK_db__port: "5432"
          LISTMONK_db__user: "{{ listmonk_db_user }}"
          LISTMONK_db__password: "{{ listmonk_db_password }}"
          LISTMONK_db__database: "{{ listmonk_db_name }}"
          LISTMONK_db__ssl_mode: "disable"
          LISTMONK_admin__username: "{{ listmonk_admin_user }}"
          LISTMONK_admin__password: "{{ listmonk_admin_password }}"
        links:
          - "{{ listmonk_db_container_name }}"
        labels:
          traefik.enable: "{{ listmonk_available_externally | string }}"
          traefik.http.routers.listmonk.rule: "Host(`{{ listmonk_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.services.listmonk.loadbalancer.server.port: "9000"
        depends_on:
          - "{{ listmonk_db_container_name }}"

    - name: Wait for Listmonk application to be ready
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ listmonk_port }}/health"
        method: GET
        status_code: 200
      register: app_health
      until: app_health.status == 200
      retries: 30
      delay: 5
      ignore_errors: true

    - name: Final deployment summary
      ansible.builtin.debug:
        msg: |
          ========================================
          LISTMONK DEPLOYMENT COMPLETE
          ========================================
          Database: {{ 'Preserved existing' if db_volume_exists.stat.exists else 'Newly initialized' }}
          Backup: {{ 'Created' if backup_result is defined else 'Not needed' }}
          Application: {{ 'Running' if app_health.status == 200 else 'Starting...' }}
          URL: http://{{ ansible_default_ipv4.address }}:{{ listmonk_port }}
          ========================================

  when: listmonk_enabled is true

- name: Stop Listmonk
  block:
    - name: Create final backup before stopping
      ansible.builtin.shell: |
        if docker ps | grep -q {{ listmonk_db_container_name }}; then
          BACKUP_FILE="{{ listmonk_data_directory }}/auto_backups/listmonk_final_$(date +%Y%m%d_%H%M%S).sql"
          docker exec {{ listmonk_db_container_name }} pg_dump -U {{ listmonk_db_user }} {{ listmonk_db_name }} > "${BACKUP_FILE}"
          gzip "${BACKUP_FILE}"
          echo "Final backup created: ${BACKUP_FILE}.gz"
        fi
      ignore_errors: true

    - name: Stop Listmonk Container
      community.docker.docker_container:
        name: "{{ listmonk_container_name }}"
        state: absent

    - name: Stop Database Container (preserving volume)
      community.docker.docker_container:
        name: "{{ listmonk_db_container_name }}"
        state: absent
        keep_volumes: true  # CRITICAL: Preserve data volume

  when: listmonk_enabled is false