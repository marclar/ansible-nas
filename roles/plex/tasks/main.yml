---
- name: Start Plex
  block:
    - name: Create Plex Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      with_items:
        - "{{ plex_config_directory }}"
        - "{{ plex_logs }}"
      become: true

    - name: Copy Plex scan script
      ansible.builtin.copy:
        src: plex-scan.sh
        dest: "{{ plex_config_directory }}/plex-scan.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      become: true

    - name: Create Plex Docker Container
      community.docker.docker_container:
        name: "{{ plex_container_name }}"
        image: "{{ plex_image_name }}:{{ plex_image_version }}"
        pull: true
        volumes:
          - "{{ plex_config_directory }}:/config:rw"
          - "{{ plex_movies_directory }}:/movies:{{ plex_movies_permissions }}"
          - "{{ plex_tv_directory }}:/tv:{{ plex_tv_permissions }}"
          - "{{ plex_photos_directory }}:/photos:{{ plex_photos_permissions }}"
          - "{{ plex_podcasts_directory }}:/podcasts:{{ plex_podcasts_permissions }}"
          - "{{ plex_music_directory }}:/music:{{ plex_music_permissions }}"
          - "{{ plex_audiobooks_directory }}:/audiobooks:{{ plex_audiobooks_permissions }}"
          - "/mnt/truenas-media:/data:rw"
          - "/mnt/truenas-media:/mnt/truenas-media:rw"
        network_mode: "host"
        devices: "{{ plex_devices | default(omit) }}"
        env:
          TZ: "{{ ansible_nas_timezone }}"
          PUID: "{{ plex_user_id }}"
          PGID: "{{ plex_group_id }}"
          VERSION: "{{ plex_version }}"
        restart_policy: unless-stopped
        memory: "{{ plex_memory }}"
        labels:
          traefik.enable: "{{ plex_available_externally | string }}"
          traefik.http.routers.plex.rule: "Host(`{{ plex_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.services.plex.loadbalancer.server.port: "32400"

    - name: Set up Plex library scan cron job
      ansible.builtin.cron:
        name: "Plex library scan"
        minute: "*/15"
        job: "docker exec {{ plex_container_name }} /config/plex-scan.sh"
        user: "{{ ansible_user }}"
        state: present
  when: plex_enabled is true

- name: Stop Plex
  block:
    - name: Stop Plex
      community.docker.docker_container:
        name: "{{ plex_container_name }}"
        state: absent
    
    - name: Remove Plex library scan cron job
      ansible.builtin.cron:
        name: "Plex library scan"
        state: absent
        user: "{{ ansible_user }}"
  when: plex_enabled is false
